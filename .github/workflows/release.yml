name: Release
on:
  push:
    branches:
      - main
      - enhanced-app
      - '**'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
          fetch-tags: true # Fetch all tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest black flake8 setuptools wheel requests
          pip install git+https://github.com/remla2025-team10/lib-version.git@dev#egg=lib-version&subdirectory=lib-version

      - name: Main Version
        if: github.ref == 'refs/heads/main'
        id: main_version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          version_format: "${major}.${minor}.${patch}"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          enable_prerelease_mode: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enhanced App (Beta) Version
        if: github.ref == 'refs/heads/enhanced-app'
        id: beta_version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          version_format: "${major}.${minor}.${patch}-beta.${increment}"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          enable_prerelease_mode: true
          bump_each_commit: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pre-release Version
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/enhanced-app'
        id: pre_version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          version_format: "${major}.${minor}.${patch}-pre.${increment}"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          enable_prerelease_mode: true
          bump_each_commit: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Version Environment Variables
        run: |
          VERSION=""
          MAJOR=""
          MINOR=""
          PATCH=""
          # Set the version based on the branch
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "Using main version"
            VERSION="${{ steps.main_version.outputs.version }}"
            MAJOR="${{ steps.main_version.outputs.major }}"
            MINOR="${{ steps.main_version.outputs.minor }}"
            PATCH="${{ steps.main_version.outputs.patch }}"
          elif [ "${{ github.ref }}" == "refs/heads/enhanced-app" ]; then
            echo "Using beta version"
            VERSION="${{ steps.beta_version.outputs.version }}"
            MAJOR="${{ steps.beta_version.outputs.major }}"
            MINOR="${{ steps.beta_version.outputs.minor }}"
            PATCH="${{ steps.beta_version.outputs.patch }}"
          else
            echo "Using pre-release version"
            VERSION="${{ steps.pre_version.outputs.version }}"
            MAJOR="${{ steps.pre_version.outputs.major }}"
            MINOR="${{ steps.pre_version.outputs.minor }}"
            PATCH="${{ steps.pre_version.outputs.patch }}"
          fi
          
          echo "Version set to: $VERSION"

          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV

      - name: Create VERSION file
        run: echo "${{ env.version }}" > VERSION

      - name: Build package
        run: |
          mkdir -p /tmp/app-release
          rsync -av --exclude='.git' --exclude='.github' . /tmp/app-release/
          tar -czf app-${{ env.version }}.tar.gz -C /tmp/app-release .        
      
      - name: Check if tag exists
        id: check_tag
        run: |
          git fetch --tags
          if git rev-parse "v${{ env.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ env.version }} already exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        id: create_release
        if: steps.check_tag.outputs.tag_exists != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ env.version }}
          release_name: Release v${{ env.version }}
          body: Release version ${{ env.version }}
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app-${{ env.version }}.tar.gz
          asset_name: app-${{ env.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/app-service:v${{ env.version }}
            ${{ github.ref_name == 'main' && format('ghcr.io/{0}/app-service:latest', github.repository_owner) || '' }}
            ${{ github.ref_name == 'enhanced-app' && format('ghcr.io/{0}/app-service:beta', github.repository_owner) || '' }}
            ${{ github.ref_name != 'main' && github.ref_name != 'enhanced-app' && format('ghcr.io/{0}/app-service:pre', github.repository_owner) || '' }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=App Service for Team 10
            org.opencontainers.image.version=${{ env.version }}
            org.opencontainers.image.variant=v${{ env.version_major }}
